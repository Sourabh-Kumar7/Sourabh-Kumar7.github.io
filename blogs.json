{"status":"ok","feed":{"url":"https://medium.com/feed/@@sourabhkr","title":"Stories by Sourabh Kumar on Medium","link":"https://medium.com/@sourabhkr?source=rss-4cc8effadc6e------2","author":"","description":"Stories by Sourabh Kumar on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*1LkKBnRdyGkIj1Q6xSVHGA.jpeg"},"items":[{"title":"Unraveling the Power of Linux: Most Common and Most Used Commands for Processes","pubDate":"2024-04-20 22:48:47","link":"https://medium.com/@sourabhkr/unraveling-the-power-of-linux-most-common-and-most-used-commands-for-processes-a59063c48a05?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/a59063c48a05","author":"Sourabh Kumar","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PCRLGx8jL9UO7DcON7zZ_w.png\"><figcaption>Source\u00a0: <a href=\"https://www.digitalocean.com/community/tutorials/process-management-in-linux\">https://www.digitalocean.com/community/tutorials/process-management-in-linux</a></figcaption></figure><p>In the intricate world of Linux, understanding how processes work is fundamental. Whether you\u2019re a seasoned developer, a sysadmin, or just an enthusiast diving into the depths of Linux, mastering process management can significantly enhance your efficiency and productivity. At the heart of this proficiency are a handful of commands, tried and tested, that form the backbone of process handling. Let\u2019s explore some of the most common and widely used Linux commands for managing processes.</p>\n<h3>1. ps - Process\u00a0Status</h3>\n<p>The ps command stands as one of the quintessential tools for viewing information about running processes. Whether you need a comprehensive snapshot or specific details, ps comes to the rescue. Its versatility allows for a wide range of options to tailor output according to your requirements. From displaying all processes to filtering by user or group, ps empowers users with insights into the running processes on their\u00a0system.</p>\n<p>Example Usage:</p>\n<pre>ps aux               # Display all running processes with detailed information<br>ps -ef | grep nginx   # Find processes related to 'nginx'</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FtzYSyVzDnbDiZmTlVFwvw.png\"></figure><h3>2. top - Dynamic Process\u00a0Viewer</h3>\n<p>For real-time monitoring of processes, top is unparalleled. Offering an interactive display of system processes, top presents vital statistics such as CPU and memory usage, along with a list of active processes sorted by various criteria. Its dynamic nature makes it indispensable for diagnosing system bottlenecks and identifying resource-hungry applications.</p>\n<p>Example Usage:</p>\n<pre>top          # Launch the dynamic process viewer</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NrajnLKLbvRfO6iK5axW2w.png\"></figure><h3>3. kill - Terminate Processes</h3>\n<p>When a misbehaving process refuses to cooperate, kill steps in to save the day. This command sends signals to processes, allowing for graceful termination or specific actions like reloading configurations. With kill, users gain control over rogue processes, restoring system stability with a simple\u00a0command.</p>\n<p>Example Usage:</p>\n<pre>kill PID               # Terminate a process by its Process ID<br>killall firefox        # Terminate all processes named 'firefox'</pre>\n<h3>4. pgrep - Process Identification</h3>\n<p>pgrep offers a convenient way to find process IDs based on various criteria, such as process name or user. This command simplifies the task of identifying processes, enabling streamlined management and troubleshooting.</p>\n<p>Example Usage:</p>\n<pre>pgrep nginx           # Find the Process IDs of processes named 'nginx'<br>pgrep -u username     # Find processes owned by a specific user</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zG95xIP7xgFQXR5KGg8lOg.png\"></figure><h3>5. pstree - Process Tree\u00a0Display</h3>\n<p>Visualizing the hierarchy of processes is made easy with pstree. This command presents an organized tree structure of processes, illustrating parent-child relationships and aiding in understanding process dependencies.</p>\n<p>Example Usage:</p>\n<pre>pstree         # Display the process tree of the entire system</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sA26Jz91SsZwlJN4_Pvozw.png\"></figure><h3>Conclusion</h3>\n<p>Linux process management is a cornerstone of system administration and development. With these commonly used commands, users gain the tools needed to monitor, control, and troubleshoot processes effectively. Whether it\u2019s identifying resource-intensive applications or terminating errant processes, mastering these commands empowers users to wield the full potential of\u00a0Linux.</p>\n<p>If you found this guide on Linux process management helpful and insightful, I\u2019d love to hear from you! Like, comment, and share your thoughts below. Your feedback is invaluable in shaping future content and helping others on their journey to mastering Linux.</p>\n<p>Don\u2019t miss out on more tips, tricks, and in-depth discussions on Linux, system administration, and development. Follow us for regular updates and join our community of Linux enthusiasts and professionals. Embrace the power of Linux process management and elevate your system administration prowess\u00a0today!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a59063c48a05\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PCRLGx8jL9UO7DcON7zZ_w.png\"><figcaption>Source\u00a0: <a href=\"https://www.digitalocean.com/community/tutorials/process-management-in-linux\">https://www.digitalocean.com/community/tutorials/process-management-in-linux</a></figcaption></figure><p>In the intricate world of Linux, understanding how processes work is fundamental. Whether you\u2019re a seasoned developer, a sysadmin, or just an enthusiast diving into the depths of Linux, mastering process management can significantly enhance your efficiency and productivity. At the heart of this proficiency are a handful of commands, tried and tested, that form the backbone of process handling. Let\u2019s explore some of the most common and widely used Linux commands for managing processes.</p>\n<h3>1. ps - Process\u00a0Status</h3>\n<p>The ps command stands as one of the quintessential tools for viewing information about running processes. Whether you need a comprehensive snapshot or specific details, ps comes to the rescue. Its versatility allows for a wide range of options to tailor output according to your requirements. From displaying all processes to filtering by user or group, ps empowers users with insights into the running processes on their\u00a0system.</p>\n<p>Example Usage:</p>\n<pre>ps aux               # Display all running processes with detailed information<br>ps -ef | grep nginx   # Find processes related to 'nginx'</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FtzYSyVzDnbDiZmTlVFwvw.png\"></figure><h3>2. top - Dynamic Process\u00a0Viewer</h3>\n<p>For real-time monitoring of processes, top is unparalleled. Offering an interactive display of system processes, top presents vital statistics such as CPU and memory usage, along with a list of active processes sorted by various criteria. Its dynamic nature makes it indispensable for diagnosing system bottlenecks and identifying resource-hungry applications.</p>\n<p>Example Usage:</p>\n<pre>top          # Launch the dynamic process viewer</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NrajnLKLbvRfO6iK5axW2w.png\"></figure><h3>3. kill - Terminate Processes</h3>\n<p>When a misbehaving process refuses to cooperate, kill steps in to save the day. This command sends signals to processes, allowing for graceful termination or specific actions like reloading configurations. With kill, users gain control over rogue processes, restoring system stability with a simple\u00a0command.</p>\n<p>Example Usage:</p>\n<pre>kill PID               # Terminate a process by its Process ID<br>killall firefox        # Terminate all processes named 'firefox'</pre>\n<h3>4. pgrep - Process Identification</h3>\n<p>pgrep offers a convenient way to find process IDs based on various criteria, such as process name or user. This command simplifies the task of identifying processes, enabling streamlined management and troubleshooting.</p>\n<p>Example Usage:</p>\n<pre>pgrep nginx           # Find the Process IDs of processes named 'nginx'<br>pgrep -u username     # Find processes owned by a specific user</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zG95xIP7xgFQXR5KGg8lOg.png\"></figure><h3>5. pstree - Process Tree\u00a0Display</h3>\n<p>Visualizing the hierarchy of processes is made easy with pstree. This command presents an organized tree structure of processes, illustrating parent-child relationships and aiding in understanding process dependencies.</p>\n<p>Example Usage:</p>\n<pre>pstree         # Display the process tree of the entire system</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sA26Jz91SsZwlJN4_Pvozw.png\"></figure><h3>Conclusion</h3>\n<p>Linux process management is a cornerstone of system administration and development. With these commonly used commands, users gain the tools needed to monitor, control, and troubleshoot processes effectively. Whether it\u2019s identifying resource-intensive applications or terminating errant processes, mastering these commands empowers users to wield the full potential of\u00a0Linux.</p>\n<p>If you found this guide on Linux process management helpful and insightful, I\u2019d love to hear from you! Like, comment, and share your thoughts below. Your feedback is invaluable in shaping future content and helping others on their journey to mastering Linux.</p>\n<p>Don\u2019t miss out on more tips, tricks, and in-depth discussions on Linux, system administration, and development. Follow us for regular updates and join our community of Linux enthusiasts and professionals. Embrace the power of Linux process management and elevate your system administration prowess\u00a0today!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a59063c48a05\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["linux","process-management","bash","process","linux-commands"]},{"title":"Conquering the Terminal: Top Linux Commands You Need to Know","pubDate":"2024-04-19 02:00:16","link":"https://medium.com/@sourabhkr/conquering-the-terminal-top-linux-commands-you-need-to-know-658e7f6ab6e0?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/658e7f6ab6e0","author":"Sourabh Kumar","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*gFLXrTBHQ_ehAOzAw-xynA.png\"><figcaption>Linux Commands</figcaption></figure><p>The Linux terminal might seem intimidating at first glance, rows of cryptic text and flashing cursors conjuring images of hackers in dark rooms. But fear not! The terminal is a powerful tool that unlocks the true potential of your Linux system. Once you learn a handful of essential commands, you\u2019ll be navigating directories, manipulating files, and customizing your environment like a\u00a0pro.</p>\n<p>This blog post equips you with the top Linux commands that form the foundation of your terminal mastery. We\u2019ll break them down into categories to make learning\u00a0easier.</p>\n<p><strong>Navigation:</strong></p>\n<ol><li>\n<strong>ls:</strong> List directory contents.</li></ol>\n<ul>\n<li>ls: Basic\u00a0listing.</li>\n<li>ls -l: Detailed listing with permissions, owner, and\u00a0size.</li>\n<li>ls -a: Show all files, including hidden ones (starting with a\u00a0dot).</li>\n</ul>\n<p>2. <strong>cd:</strong> Change directory.</p>\n<ul>\n<li>cd Desktop: Move to the Desktop directory.</li>\n<li>cd\u00a0..: Go back one directory level.</li>\n<li>cd ~: Move to your home directory.</li>\n</ul>\n<p>3. <strong>pwd:</strong> Print Working Directory. Shows your current location in the file\u00a0system.</p>\n<p><strong>File Management:</strong></p>\n<p>4.<strong> mkdir:</strong> Create a new directory.</p>\n<ul><li>mkdir Documents: Creates a directory named \"Documents\".</li></ul>\n<p>5.<strong> mv:</strong> Move or rename files/directories.</p>\n<ul>\n<li>mv old_file new_file: Renames \"old_file\" to \"new_file\".</li>\n<li>mv file1 /home/user/Pictures: Moves \"file1\" to the Pictures directory.</li>\n</ul>\n<p>6.<strong> cp:</strong> Copy files/directories.</p>\n<ul>\n<li>cp file1 copy_of_file1: Creates a copy named \"copy_of_file1\".</li>\n<li>cp -r directory1 new_directory: Copies an entire directory recursively (including subdirectories).</li>\n</ul>\n<p>7.<strong> rm:</strong> Remove files/directories (use with caution!).</p>\n<ul>\n<li>rm file1: Permanently deletes\u00a0\"file1\".</li>\n<li>rm -rf directory1: Forces deletion of a directory, even if it's not empty (use with extreme caution!).</li>\n</ul>\n<p>8.<strong> touch:</strong> Create an empty\u00a0file.</p>\n<ul><li>touch new_file.txt: Creates a new empty file named \"new_file.txt\".</li></ul>\n<p><strong>Viewing Files:</strong></p>\n<p>9.<strong> cat:</strong> Display the contents of a\u00a0file.</p>\n<ul><li>cat message.txt: Shows the content of \"message.txt\".</li></ul>\n<p>10.<strong> more/less:</strong> Navigate large files page by\u00a0page.</p>\n<ul><li>more message.log: View the \"message.log\" file one page at a\u00a0time.</li></ul>\n<p><strong>Text Manipulation:</strong></p>\n<p>11. <strong>head:</strong> Show the beginning of a\u00a0file.</p>\n<ul><li>head -n 5 file.txt: Displays the first 5 lines of \"file.txt\".</li></ul>\n<p>12.<strong> tail:</strong> Show the end of a\u00a0file.</p>\n<ul><li>tail -f logfile.txt: Displays the last lines of \"logfile.txt\" and follows for new additions (useful for live\u00a0logs).</li></ul>\n<p><strong>Searching:</strong></p>\n<p>13.<strong> grep:</strong> Search for text within a\u00a0file.</p>\n<ul><li>grep error message.log: Searches for the word \"error\" in \"message.log\".</li></ul>\n<p><strong>System Information:</strong></p>\n<p>14.<strong> uname:</strong> Get information about the\u00a0kernel.</p>\n<ul><li>uname -a: Displays all available kernel information.</li></ul>\n<p>15.<strong> df:</strong> Show disk\u00a0usage.</p>\n<ul><li>df -h: Shows disk usage in human-readable format.</li></ul>\n<p><strong>Permissions and Ownership:</strong> (These require more\u00a0caution)</p>\n<p>16.<strong> chmod:</strong> Change file permissions. (See man chmod for\u00a0details)</p>\n<ul><li>chmod is used to modify file access permissions for user, group, and others (read, write, execute).</li></ul>\n<p><strong>Help and Information:</strong></p>\n<p>17.<strong> man:</strong> Access command\u00a0manuals.</p>\n<ul><li>man ls: Provides detailed information about the ls\u00a0command.</li></ul>\n<p>18. <strong>help:</strong> Get help on a specific\u00a0command.</p>\n<ul><li>help cd: Offers quick reference for the cd\u00a0command.</li></ul>\n<p><strong>Bonus Commands:</strong></p>\n<p>19.<strong> clear:</strong> Clear the terminal\u00a0screen.</p>\n<p>20.<strong> history:</strong> View your command\u00a0history.</p>\n<p>Remember, these are just the building blocks. The Linux terminal offers a vast array of commands for various purposes. Experiment with these commands, explore the man pages for deeper understanding, and gradually expand your Linux skillset!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=658e7f6ab6e0\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*gFLXrTBHQ_ehAOzAw-xynA.png\"><figcaption>Linux Commands</figcaption></figure><p>The Linux terminal might seem intimidating at first glance, rows of cryptic text and flashing cursors conjuring images of hackers in dark rooms. But fear not! The terminal is a powerful tool that unlocks the true potential of your Linux system. Once you learn a handful of essential commands, you\u2019ll be navigating directories, manipulating files, and customizing your environment like a\u00a0pro.</p>\n<p>This blog post equips you with the top Linux commands that form the foundation of your terminal mastery. We\u2019ll break them down into categories to make learning\u00a0easier.</p>\n<p><strong>Navigation:</strong></p>\n<ol><li>\n<strong>ls:</strong> List directory contents.</li></ol>\n<ul>\n<li>ls: Basic\u00a0listing.</li>\n<li>ls -l: Detailed listing with permissions, owner, and\u00a0size.</li>\n<li>ls -a: Show all files, including hidden ones (starting with a\u00a0dot).</li>\n</ul>\n<p>2. <strong>cd:</strong> Change directory.</p>\n<ul>\n<li>cd Desktop: Move to the Desktop directory.</li>\n<li>cd\u00a0..: Go back one directory level.</li>\n<li>cd ~: Move to your home directory.</li>\n</ul>\n<p>3. <strong>pwd:</strong> Print Working Directory. Shows your current location in the file\u00a0system.</p>\n<p><strong>File Management:</strong></p>\n<p>4.<strong> mkdir:</strong> Create a new directory.</p>\n<ul><li>mkdir Documents: Creates a directory named \"Documents\".</li></ul>\n<p>5.<strong> mv:</strong> Move or rename files/directories.</p>\n<ul>\n<li>mv old_file new_file: Renames \"old_file\" to \"new_file\".</li>\n<li>mv file1 /home/user/Pictures: Moves \"file1\" to the Pictures directory.</li>\n</ul>\n<p>6.<strong> cp:</strong> Copy files/directories.</p>\n<ul>\n<li>cp file1 copy_of_file1: Creates a copy named \"copy_of_file1\".</li>\n<li>cp -r directory1 new_directory: Copies an entire directory recursively (including subdirectories).</li>\n</ul>\n<p>7.<strong> rm:</strong> Remove files/directories (use with caution!).</p>\n<ul>\n<li>rm file1: Permanently deletes\u00a0\"file1\".</li>\n<li>rm -rf directory1: Forces deletion of a directory, even if it's not empty (use with extreme caution!).</li>\n</ul>\n<p>8.<strong> touch:</strong> Create an empty\u00a0file.</p>\n<ul><li>touch new_file.txt: Creates a new empty file named \"new_file.txt\".</li></ul>\n<p><strong>Viewing Files:</strong></p>\n<p>9.<strong> cat:</strong> Display the contents of a\u00a0file.</p>\n<ul><li>cat message.txt: Shows the content of \"message.txt\".</li></ul>\n<p>10.<strong> more/less:</strong> Navigate large files page by\u00a0page.</p>\n<ul><li>more message.log: View the \"message.log\" file one page at a\u00a0time.</li></ul>\n<p><strong>Text Manipulation:</strong></p>\n<p>11. <strong>head:</strong> Show the beginning of a\u00a0file.</p>\n<ul><li>head -n 5 file.txt: Displays the first 5 lines of \"file.txt\".</li></ul>\n<p>12.<strong> tail:</strong> Show the end of a\u00a0file.</p>\n<ul><li>tail -f logfile.txt: Displays the last lines of \"logfile.txt\" and follows for new additions (useful for live\u00a0logs).</li></ul>\n<p><strong>Searching:</strong></p>\n<p>13.<strong> grep:</strong> Search for text within a\u00a0file.</p>\n<ul><li>grep error message.log: Searches for the word \"error\" in \"message.log\".</li></ul>\n<p><strong>System Information:</strong></p>\n<p>14.<strong> uname:</strong> Get information about the\u00a0kernel.</p>\n<ul><li>uname -a: Displays all available kernel information.</li></ul>\n<p>15.<strong> df:</strong> Show disk\u00a0usage.</p>\n<ul><li>df -h: Shows disk usage in human-readable format.</li></ul>\n<p><strong>Permissions and Ownership:</strong> (These require more\u00a0caution)</p>\n<p>16.<strong> chmod:</strong> Change file permissions. (See man chmod for\u00a0details)</p>\n<ul><li>chmod is used to modify file access permissions for user, group, and others (read, write, execute).</li></ul>\n<p><strong>Help and Information:</strong></p>\n<p>17.<strong> man:</strong> Access command\u00a0manuals.</p>\n<ul><li>man ls: Provides detailed information about the ls\u00a0command.</li></ul>\n<p>18. <strong>help:</strong> Get help on a specific\u00a0command.</p>\n<ul><li>help cd: Offers quick reference for the cd\u00a0command.</li></ul>\n<p><strong>Bonus Commands:</strong></p>\n<p>19.<strong> clear:</strong> Clear the terminal\u00a0screen.</p>\n<p>20.<strong> history:</strong> View your command\u00a0history.</p>\n<p>Remember, these are just the building blocks. The Linux terminal offers a vast array of commands for various purposes. Experiment with these commands, explore the man pages for deeper understanding, and gradually expand your Linux skillset!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=658e7f6ab6e0\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["bash","bash-script","ubuntu","linux-commands","linux"]},{"title":"Behind the Scenes: Triggers in the Database","pubDate":"2024-04-19 01:20:55","link":"https://medium.com/@sourabhkr/behind-the-scenes-triggers-in-the-database-796b84ed6e86?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/796b84ed6e86","author":"Sourabh Kumar","thumbnail":"","description":"\n<p>Have you ever wondered how a website ensures your username is unique, or how an e-commerce platform automatically updates your shopping cart total? These seemingly magical functionalities are often powered by triggers\u200a\u2014\u200asilent guardians within the database.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/1*5l_sMl5qy_Ig8bpns1D8dQ.png\"><figcaption>Triggers</figcaption></figure><p><strong>What are Triggers?</strong></p>\n<p>Imagine a database table as a filing cabinet. Triggers act like automated filing assistants. You define specific events (like adding a new file, modifying an existing one, or deleting a file) and the corresponding actions the assistant should take. These actions can be anything from validating data to sending notifications.</p>\n<p><strong>Types of Triggers:</strong></p>\n<ul>\n<li>\n<strong>DML Triggers (Data Manipulation Language):</strong> These are the most common, responding to events like INSERT, UPDATE, and DELETE operations on a\u00a0table.</li>\n<li>\n<strong>DDL Triggers (Data Definition Language):</strong> These are triggered by schema changes, like creating or dropping\u00a0tables.</li>\n<li>\n<strong>INSTEAD OF Triggers:</strong> These powerful triggers completely replace the original DML statement with custom\u00a0logic.</li>\n</ul>\n<p><strong>The Power of Triggers:</strong></p>\n<ul>\n<li>\n<strong>Enforcing Data Integrity:</strong> Triggers can validate data before it enters the database, preventing inconsistencies and ensuring adherence to business\u00a0rules.</li>\n<li>\n<strong>Automating Tasks:</strong> Triggers can automate repetitive tasks like updating related tables, sending notifications, or logging changes. Imagine a trigger that automatically calculates a product\u2019s total price after a discount is\u00a0applied.</li>\n<li>\n<strong>Enhancing Security:</strong> Triggers can enforce access controls or data encryption, adding an extra layer of protection.</li>\n</ul>\n<p><strong>A Double-Edged Sword:</strong></p>\n<p>While triggers offer significant benefits, they also come with potential downsides:</p>\n<ul>\n<li>\n<strong>Performance Overhead:</strong> Triggers add an extra step to data manipulation, potentially slowing down database operations.</li>\n<li>\n<strong>Complexity:</strong> Overly complex triggers can be difficult to understand and maintain, leading to debugging challenges.</li>\n<li>\n<strong>Tight Coupling:</strong> Triggers tie application logic to the database, making it less flexible for future\u00a0changes.</li>\n</ul>\n<p><strong>Where do Triggers\u00a0Live?</strong></p>\n<p>Triggers are stored within the database management system (DBMS) itself\u200a\u2014\u200aMySQL, PostgreSQL, Oracle, etc. They are essentially pre-written code snippets that are compiled and readily available for execution when the designated event\u00a0occurs.</p>\n<p><strong>In Conclusion:</strong></p>\n<p>Triggers are powerful tools for automating tasks and enforcing data integrity within databases. By understanding their types, uses, and limitations, you can leverage them effectively to build robust and secure data-driven applications.</p>\n<p><strong>Remember:</strong> Triggers are like helpful assistants, but use them wisely to avoid creating a cluttered and slow-performing database!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=796b84ed6e86\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Have you ever wondered how a website ensures your username is unique, or how an e-commerce platform automatically updates your shopping cart total? These seemingly magical functionalities are often powered by triggers\u200a\u2014\u200asilent guardians within the database.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/1*5l_sMl5qy_Ig8bpns1D8dQ.png\"><figcaption>Triggers</figcaption></figure><p><strong>What are Triggers?</strong></p>\n<p>Imagine a database table as a filing cabinet. Triggers act like automated filing assistants. You define specific events (like adding a new file, modifying an existing one, or deleting a file) and the corresponding actions the assistant should take. These actions can be anything from validating data to sending notifications.</p>\n<p><strong>Types of Triggers:</strong></p>\n<ul>\n<li>\n<strong>DML Triggers (Data Manipulation Language):</strong> These are the most common, responding to events like INSERT, UPDATE, and DELETE operations on a\u00a0table.</li>\n<li>\n<strong>DDL Triggers (Data Definition Language):</strong> These are triggered by schema changes, like creating or dropping\u00a0tables.</li>\n<li>\n<strong>INSTEAD OF Triggers:</strong> These powerful triggers completely replace the original DML statement with custom\u00a0logic.</li>\n</ul>\n<p><strong>The Power of Triggers:</strong></p>\n<ul>\n<li>\n<strong>Enforcing Data Integrity:</strong> Triggers can validate data before it enters the database, preventing inconsistencies and ensuring adherence to business\u00a0rules.</li>\n<li>\n<strong>Automating Tasks:</strong> Triggers can automate repetitive tasks like updating related tables, sending notifications, or logging changes. Imagine a trigger that automatically calculates a product\u2019s total price after a discount is\u00a0applied.</li>\n<li>\n<strong>Enhancing Security:</strong> Triggers can enforce access controls or data encryption, adding an extra layer of protection.</li>\n</ul>\n<p><strong>A Double-Edged Sword:</strong></p>\n<p>While triggers offer significant benefits, they also come with potential downsides:</p>\n<ul>\n<li>\n<strong>Performance Overhead:</strong> Triggers add an extra step to data manipulation, potentially slowing down database operations.</li>\n<li>\n<strong>Complexity:</strong> Overly complex triggers can be difficult to understand and maintain, leading to debugging challenges.</li>\n<li>\n<strong>Tight Coupling:</strong> Triggers tie application logic to the database, making it less flexible for future\u00a0changes.</li>\n</ul>\n<p><strong>Where do Triggers\u00a0Live?</strong></p>\n<p>Triggers are stored within the database management system (DBMS) itself\u200a\u2014\u200aMySQL, PostgreSQL, Oracle, etc. They are essentially pre-written code snippets that are compiled and readily available for execution when the designated event\u00a0occurs.</p>\n<p><strong>In Conclusion:</strong></p>\n<p>Triggers are powerful tools for automating tasks and enforcing data integrity within databases. By understanding their types, uses, and limitations, you can leverage them effectively to build robust and secure data-driven applications.</p>\n<p><strong>Remember:</strong> Triggers are like helpful assistants, but use them wisely to avoid creating a cluttered and slow-performing database!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=796b84ed6e86\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["transactions","dbms","database","triggers-in-sql"]},{"title":"Stored Procedures: Database Superpowers for Everyone","pubDate":"2024-03-30 04:33:06","link":"https://medium.com/@sourabhkr/stored-procedures-database-superpowers-for-everyone-1ed598b0203f?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/1ed598b0203f","author":"Sourabh Kumar","thumbnail":"","description":"\n<p>Have you ever found yourself writing the same complex SQL query over and over? Or maybe you wished there was a way to automate a series of database tasks? Well, fret no more! Stored procedures are here to save the\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/648/1*p5vS2y1u-9Xi76brP9ABCQ.png\"></figure><p><strong>What is a Stored Procedure?</strong></p>\n<p>Imagine a stored procedure as a pre-written recipe stored in your database\u2019s cookbook. This recipe combines several SQL statements into a single unit, like a magic spell for your data. You can give it a name and easily call upon it whenever you need to execute those tasks, just like following a\u00a0recipe.</p>\n<p><strong>Why Use Stored Procedures?</strong></p>\n<p>There are several reasons why stored procedures are like superpowers for your database:</p>\n<ul>\n<li>\n<strong>Reusability:</strong> No more rewriting the same complex queries. Just call the stored procedure, and voila! This saves you time and\u00a0effort.</li>\n<li>\n<strong>Modularity:</strong> Break down complex tasks into smaller, manageable procedures. This makes your code easier to understand and maintain.</li>\n<li>\n<strong>Security:</strong> Control access to data by defining permissions on stored procedures instead of individual SQL statements.</li>\n<li>\n<strong>Performance:</strong> Stored procedures are pre-compiled by the database, meaning they can run faster than regular SQL statements. Think of it like preheating the oven before baking your\u00a0cake.</li>\n<li>\n<strong>Error Handling:</strong> Build error handling logic into your stored procedures to prevent unexpected issues.</li>\n</ul>\n<p><strong>When to Use Stored Procedures</strong></p>\n<p>Stored procedures are particularly useful\u00a0for:</p>\n<ul>\n<li>\n<strong>Complex Calculations:</strong> Perform a series of calculations or data manipulations without writing lengthy\u00a0queries.</li>\n<li>\n<strong>Data Validation:</strong> Ensure data integrity by incorporating validation checks within the stored procedure.</li>\n<li>\n<strong>Standardization:</strong> Enforce consistent data access across different applications by using the same stored procedure.</li>\n<li>\n<strong>Reporting:</strong> Create reusable procedures to generate reports and summaries from your database.</li>\n</ul>\n<p><strong>A Peek Under the Hood: Stored Procedure Syntax</strong></p>\n<p>The exact syntax for creating stored procedures varies slightly between database systems, but the basic concept remains the same. Here\u2019s a simplified example:</p>\n<pre>CREATE PROCEDURE UpdateCustomerDiscount(customerID INT, newDiscount DECIMAL)<br>AS<br>BEGIN<br>  UPDATE Customers SET Discount = newDiscount WHERE CustomerID = customerID;<br>END;</pre>\n<p>This procedure takes two parameters: a customer ID and a new discount value. It then updates the discount for that specific customer in the Customers table.</p>\n<p><strong>The Importance of Stored Procedures</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/698/1*_JjBQdergBtAtX5WMuqmkQ.jpeg\"><figcaption>Source: <a href=\"https://www.apptha.com/blog/mysql-stored-procedures/\">https://www.apptha.com/blog/mysql-stored-procedures/</a></figcaption></figure><p>Stored procedures are a fundamental concept for efficient and secure database management. They promote code organization, improve performance, and enhance data security. For beginners, they simplify complex tasks, and for technical leads, they offer a powerful tool for building scalable and maintainable database applications.</p>\n<p><strong>Advantages:</strong></p>\n<ul>\n<li>Reusability</li>\n<li>Modularity</li>\n<li>Security</li>\n<li>Performance</li>\n<li>Error Handling</li>\n</ul>\n<p><strong>Disadvantages:</strong></p>\n<ul>\n<li>Debugging can be trickier than with regular SQL statements.</li>\n<li>Changes to the stored procedure require updating all the applications that call\u00a0it.</li>\n</ul>\n<p><strong>Types of Stored Procedures</strong></p>\n<p>There are different types of stored procedures to suit various needs, but that\u2019s a topic for another\u00a0post!</p>\n<p><strong>Conclusion</strong></p>\n<p>Stored procedures are a valuable tool for anyone who interacts with databases. Whether you\u2019re a beginner or a seasoned pro, understanding stored procedures will empower you to manage your data with more efficiency and control. So, the next time you find yourself repeating a complex database task, consider creating a stored procedure\u200a\u2014\u200ait might just be the magic spell your database\u00a0needs!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1ed598b0203f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Have you ever found yourself writing the same complex SQL query over and over? Or maybe you wished there was a way to automate a series of database tasks? Well, fret no more! Stored procedures are here to save the\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/648/1*p5vS2y1u-9Xi76brP9ABCQ.png\"></figure><p><strong>What is a Stored Procedure?</strong></p>\n<p>Imagine a stored procedure as a pre-written recipe stored in your database\u2019s cookbook. This recipe combines several SQL statements into a single unit, like a magic spell for your data. You can give it a name and easily call upon it whenever you need to execute those tasks, just like following a\u00a0recipe.</p>\n<p><strong>Why Use Stored Procedures?</strong></p>\n<p>There are several reasons why stored procedures are like superpowers for your database:</p>\n<ul>\n<li>\n<strong>Reusability:</strong> No more rewriting the same complex queries. Just call the stored procedure, and voila! This saves you time and\u00a0effort.</li>\n<li>\n<strong>Modularity:</strong> Break down complex tasks into smaller, manageable procedures. This makes your code easier to understand and maintain.</li>\n<li>\n<strong>Security:</strong> Control access to data by defining permissions on stored procedures instead of individual SQL statements.</li>\n<li>\n<strong>Performance:</strong> Stored procedures are pre-compiled by the database, meaning they can run faster than regular SQL statements. Think of it like preheating the oven before baking your\u00a0cake.</li>\n<li>\n<strong>Error Handling:</strong> Build error handling logic into your stored procedures to prevent unexpected issues.</li>\n</ul>\n<p><strong>When to Use Stored Procedures</strong></p>\n<p>Stored procedures are particularly useful\u00a0for:</p>\n<ul>\n<li>\n<strong>Complex Calculations:</strong> Perform a series of calculations or data manipulations without writing lengthy\u00a0queries.</li>\n<li>\n<strong>Data Validation:</strong> Ensure data integrity by incorporating validation checks within the stored procedure.</li>\n<li>\n<strong>Standardization:</strong> Enforce consistent data access across different applications by using the same stored procedure.</li>\n<li>\n<strong>Reporting:</strong> Create reusable procedures to generate reports and summaries from your database.</li>\n</ul>\n<p><strong>A Peek Under the Hood: Stored Procedure Syntax</strong></p>\n<p>The exact syntax for creating stored procedures varies slightly between database systems, but the basic concept remains the same. Here\u2019s a simplified example:</p>\n<pre>CREATE PROCEDURE UpdateCustomerDiscount(customerID INT, newDiscount DECIMAL)<br>AS<br>BEGIN<br>  UPDATE Customers SET Discount = newDiscount WHERE CustomerID = customerID;<br>END;</pre>\n<p>This procedure takes two parameters: a customer ID and a new discount value. It then updates the discount for that specific customer in the Customers table.</p>\n<p><strong>The Importance of Stored Procedures</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/698/1*_JjBQdergBtAtX5WMuqmkQ.jpeg\"><figcaption>Source: <a href=\"https://www.apptha.com/blog/mysql-stored-procedures/\">https://www.apptha.com/blog/mysql-stored-procedures/</a></figcaption></figure><p>Stored procedures are a fundamental concept for efficient and secure database management. They promote code organization, improve performance, and enhance data security. For beginners, they simplify complex tasks, and for technical leads, they offer a powerful tool for building scalable and maintainable database applications.</p>\n<p><strong>Advantages:</strong></p>\n<ul>\n<li>Reusability</li>\n<li>Modularity</li>\n<li>Security</li>\n<li>Performance</li>\n<li>Error Handling</li>\n</ul>\n<p><strong>Disadvantages:</strong></p>\n<ul>\n<li>Debugging can be trickier than with regular SQL statements.</li>\n<li>Changes to the stored procedure require updating all the applications that call\u00a0it.</li>\n</ul>\n<p><strong>Types of Stored Procedures</strong></p>\n<p>There are different types of stored procedures to suit various needs, but that\u2019s a topic for another\u00a0post!</p>\n<p><strong>Conclusion</strong></p>\n<p>Stored procedures are a valuable tool for anyone who interacts with databases. Whether you\u2019re a beginner or a seasoned pro, understanding stored procedures will empower you to manage your data with more efficiency and control. So, the next time you find yourself repeating a complex database task, consider creating a stored procedure\u200a\u2014\u200ait might just be the magic spell your database\u00a0needs!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1ed598b0203f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["stored-procedure","dbms","database","optimization","procedure"]},{"title":"The CAP Theorem: Why You Can\u2019t Have Everything (But That\u2019s Okay!)","pubDate":"2024-03-23 02:57:07","link":"https://medium.com/@sourabhkr/the-cap-theorem-why-you-cant-have-everything-but-that-s-okay-69af90f9c660?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/69af90f9c660","author":"Sourabh Kumar","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/850/1*VZ_9ITemwQ8sNb0MycLZLA.jpeg\"><figcaption>Cap Throrem</figcaption></figure><p>Imagine you\u2019re running a giant online store with multiple warehouses across the country. A customer in New York wants to order a new gaming console. They need to know: is it in stock, and can they get it\u00a0quickly?</p>\n<p>In the world of computers, this translates to <a href=\"https://medium.com/@sourabhkr/the-power-of-many-how-distributed-systems-make-our-lives-easier-89dfaff8a08f\"><strong>distributed systems</strong></a>, where data is stored across different servers (warehouses) for speed and reliability. But there\u2019s a catch, kind of like a delivery truck getting stuck in traffic. These systems need to consider three\u00a0things:</p>\n<ul>\n<li>\n<strong>Consistency (C):</strong> All warehouses (servers) must agree on the stock level (data). If New York shows 5 consoles, Los Angeles should\u00a0too.</li>\n<li>\n<strong>Availability (A):</strong> Every customer (request) should get a response, even if a warehouse (server) is down for a bit. Maybe New York can\u2019t reach Los Angeles, but it can still tell the customer it\u2019s checking.</li>\n<li>\n<strong>Partition Tolerance (P):</strong> The system must keep working even if the network (delivery trucks) has issues. Maybe a storm cuts off communication between warehouses.</li>\n</ul>\n<p>Here\u2019s the twist: The <strong>CAP Theorem</strong>, introduced by computer scientist Eric Brewer, says you can only have <strong>two</strong> of these guarantees at a\u00a0time!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/722/1*5lPpLC1ZwaWM6NgNC5VrXA.png\"><figcaption>Possible flavours of\u00a0CAP</figcaption></figure><p><strong>Let\u2019s see why with our warehouse example:</strong></p>\n<ol>\n<li>\n<strong>CA (Consistent &amp; Available):</strong> This is ideal, but what if the storm cuts off communication between warehouses? New York might tell the customer there are 5 consoles, but then Los Angeles sells them all. Consistency breaks!</li>\n<li>\n<strong>CP (Consistent &amp; Partition Tolerant):</strong> If the storm hits, New York might not be able to contact Los Angeles. To stay consistent, it might tell the customer it can\u2019t check stock (not available). Not ideal, but at least the data stays accurate.</li>\n<li>\n<strong>AP (Available &amp; Partition Tolerant):</strong> Even in the storm, New York can tell the customer it\u2019s checking stock (available). But Los Angeles might sell those consoles, leading to inconsistencies later. This is a trade-off for better responsiveness.</li>\n</ol>\n<p><strong>In the real\u00a0world:</strong></p>\n<ul>\n<li>\n<strong>Banking systems</strong> prioritize consistency (every transaction must be correct). They might be less available during maintenance.</li>\n<li>\n<strong>Social media platforms</strong> focus on availability (you always see updates, even if they\u2019re slightly delayed). Perfect consistency might not be crucial\u00a0here.</li>\n</ul>\n<p><strong>Understanding the CAP theorem helps us choose the right tools for the job. It\u2019s like choosing between a super secure safe (consistent but slow) or a readily available cash register (available but with a risk of errors). There\u2019s no perfect answer, but with the CAP theorem, we can make informed decisions!</strong></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69af90f9c660\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/850/1*VZ_9ITemwQ8sNb0MycLZLA.jpeg\"><figcaption>Cap Throrem</figcaption></figure><p>Imagine you\u2019re running a giant online store with multiple warehouses across the country. A customer in New York wants to order a new gaming console. They need to know: is it in stock, and can they get it\u00a0quickly?</p>\n<p>In the world of computers, this translates to <a href=\"https://medium.com/@sourabhkr/the-power-of-many-how-distributed-systems-make-our-lives-easier-89dfaff8a08f\"><strong>distributed systems</strong></a>, where data is stored across different servers (warehouses) for speed and reliability. But there\u2019s a catch, kind of like a delivery truck getting stuck in traffic. These systems need to consider three\u00a0things:</p>\n<ul>\n<li>\n<strong>Consistency (C):</strong> All warehouses (servers) must agree on the stock level (data). If New York shows 5 consoles, Los Angeles should\u00a0too.</li>\n<li>\n<strong>Availability (A):</strong> Every customer (request) should get a response, even if a warehouse (server) is down for a bit. Maybe New York can\u2019t reach Los Angeles, but it can still tell the customer it\u2019s checking.</li>\n<li>\n<strong>Partition Tolerance (P):</strong> The system must keep working even if the network (delivery trucks) has issues. Maybe a storm cuts off communication between warehouses.</li>\n</ul>\n<p>Here\u2019s the twist: The <strong>CAP Theorem</strong>, introduced by computer scientist Eric Brewer, says you can only have <strong>two</strong> of these guarantees at a\u00a0time!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/722/1*5lPpLC1ZwaWM6NgNC5VrXA.png\"><figcaption>Possible flavours of\u00a0CAP</figcaption></figure><p><strong>Let\u2019s see why with our warehouse example:</strong></p>\n<ol>\n<li>\n<strong>CA (Consistent &amp; Available):</strong> This is ideal, but what if the storm cuts off communication between warehouses? New York might tell the customer there are 5 consoles, but then Los Angeles sells them all. Consistency breaks!</li>\n<li>\n<strong>CP (Consistent &amp; Partition Tolerant):</strong> If the storm hits, New York might not be able to contact Los Angeles. To stay consistent, it might tell the customer it can\u2019t check stock (not available). Not ideal, but at least the data stays accurate.</li>\n<li>\n<strong>AP (Available &amp; Partition Tolerant):</strong> Even in the storm, New York can tell the customer it\u2019s checking stock (available). But Los Angeles might sell those consoles, leading to inconsistencies later. This is a trade-off for better responsiveness.</li>\n</ol>\n<p><strong>In the real\u00a0world:</strong></p>\n<ul>\n<li>\n<strong>Banking systems</strong> prioritize consistency (every transaction must be correct). They might be less available during maintenance.</li>\n<li>\n<strong>Social media platforms</strong> focus on availability (you always see updates, even if they\u2019re slightly delayed). Perfect consistency might not be crucial\u00a0here.</li>\n</ul>\n<p><strong>Understanding the CAP theorem helps us choose the right tools for the job. It\u2019s like choosing between a super secure safe (consistent but slow) or a readily available cash register (available but with a risk of errors). There\u2019s no perfect answer, but with the CAP theorem, we can make informed decisions!</strong></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69af90f9c660\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["database","system-design-concepts","distributed-systems","cap-theorem"]},{"title":"The Power of Many: How Distributed Systems Make Our Lives Easier","pubDate":"2024-03-23 02:52:42","link":"https://medium.com/@sourabhkr/the-power-of-many-how-distributed-systems-make-our-lives-easier-89dfaff8a08f?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/89dfaff8a08f","author":"Sourabh Kumar","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1fACTp_J7QWfUw9MOxjY_Q.jpeg\"><figcaption>Distributed Systems</figcaption></figure><p>Imagine a world with just one computer handling everything\u200a\u2014\u200aonline shopping, social media, even your email. It would be slow, unreliable, and probably melt trying to keep\u00a0up.</p>\n<p>That\u2019s where <strong>distributed systems</strong> come in! They\u2019re like tag teams for computers. Instead of relying on one machine, they spread the workload across many computers working together. Think of it as having multiple chefs in a giant kitchen, each handling a different part of the\u00a0meal.</p>\n<p><strong>Why Distributed Systems?</strong></p>\n<p>Remember the days of dial-up internet? Slow, right? Distributed systems help us avoid that. By dividing tasks, they\u00a0offer:</p>\n<ul>\n<li>\n<strong>Speed:</strong> Multiple computers working together can handle massive amounts of data much\u00a0faster.</li>\n<li>\n<strong>Scalability:</strong> Need to handle more users or data? Just add more computers to the\u00a0team!</li>\n<li>\n<strong>Reliability:</strong> If one computer goes down, the others can pick up the slack. No single point of\u00a0failure!</li>\n</ul>\n<p><strong>A Brief\u00a0History:</strong></p>\n<p>The idea of distributed systems has been around since the early days of computing. In the 50s and 60s, mainframe computers were connected to share resources. The 80s saw the rise of personal computers, leading to the need for sharing data and processing power across networks. Today, distributed systems are the backbone of the internet, cloud computing, and many of the apps we use\u00a0daily.</p>\n<p><strong>How it Works (without the Geek\u00a0Speak!)</strong></p>\n<p>Imagine a movie streaming service. When you hit play, your request goes to a <strong>distributed system</strong>. Here\u2019s a simplified breakdown:</p>\n<ol>\n<li>\n<strong>Load Balancing:</strong> A \u201ctraffic cop\u201d computer directs your request to the best available server (think assigning chefs to different cooking stations).</li>\n<li>\n<strong>Data Distribution:</strong> The movie data might be stored across multiple servers (like having ingredients prepped in different areas of the kitchen).</li>\n<li>\n<strong>Work Sharing:</strong> Different servers might handle different parts of the movie (downloading the video, subtitles, etc.).</li>\n<li>\n<strong>Delivery:</strong> The pieces come together, and you start streaming the movie smoothly (like a perfectly coordinated meal being\u00a0served).</li>\n</ol>\n<p><strong>Examples in\u00a0Action:</strong></p>\n<ul>\n<li>\n<strong>Online Shopping:</strong> Your order is processed across multiple servers\u200a\u2014\u200achecking inventory, handling payments, and coordinating delivery.</li>\n<li>\n<strong>Email:</strong> When you send an email, it\u2019s copied and stored on multiple servers for reliability.</li>\n<li>\n<strong>Social Media:</strong> Your updates are replicated across servers, ensuring everyone sees them even if one server gets overloaded.</li>\n</ul>\n<p><strong>Distributed systems are the invisible heroes powering the digital world. They work behind the scenes, keeping things fast, reliable, and ever-growing. So next time you stream a movie or check your email, remember the power of many computers working together as\u00a0one!</strong></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=89dfaff8a08f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1fACTp_J7QWfUw9MOxjY_Q.jpeg\"><figcaption>Distributed Systems</figcaption></figure><p>Imagine a world with just one computer handling everything\u200a\u2014\u200aonline shopping, social media, even your email. It would be slow, unreliable, and probably melt trying to keep\u00a0up.</p>\n<p>That\u2019s where <strong>distributed systems</strong> come in! They\u2019re like tag teams for computers. Instead of relying on one machine, they spread the workload across many computers working together. Think of it as having multiple chefs in a giant kitchen, each handling a different part of the\u00a0meal.</p>\n<p><strong>Why Distributed Systems?</strong></p>\n<p>Remember the days of dial-up internet? Slow, right? Distributed systems help us avoid that. By dividing tasks, they\u00a0offer:</p>\n<ul>\n<li>\n<strong>Speed:</strong> Multiple computers working together can handle massive amounts of data much\u00a0faster.</li>\n<li>\n<strong>Scalability:</strong> Need to handle more users or data? Just add more computers to the\u00a0team!</li>\n<li>\n<strong>Reliability:</strong> If one computer goes down, the others can pick up the slack. No single point of\u00a0failure!</li>\n</ul>\n<p><strong>A Brief\u00a0History:</strong></p>\n<p>The idea of distributed systems has been around since the early days of computing. In the 50s and 60s, mainframe computers were connected to share resources. The 80s saw the rise of personal computers, leading to the need for sharing data and processing power across networks. Today, distributed systems are the backbone of the internet, cloud computing, and many of the apps we use\u00a0daily.</p>\n<p><strong>How it Works (without the Geek\u00a0Speak!)</strong></p>\n<p>Imagine a movie streaming service. When you hit play, your request goes to a <strong>distributed system</strong>. Here\u2019s a simplified breakdown:</p>\n<ol>\n<li>\n<strong>Load Balancing:</strong> A \u201ctraffic cop\u201d computer directs your request to the best available server (think assigning chefs to different cooking stations).</li>\n<li>\n<strong>Data Distribution:</strong> The movie data might be stored across multiple servers (like having ingredients prepped in different areas of the kitchen).</li>\n<li>\n<strong>Work Sharing:</strong> Different servers might handle different parts of the movie (downloading the video, subtitles, etc.).</li>\n<li>\n<strong>Delivery:</strong> The pieces come together, and you start streaming the movie smoothly (like a perfectly coordinated meal being\u00a0served).</li>\n</ol>\n<p><strong>Examples in\u00a0Action:</strong></p>\n<ul>\n<li>\n<strong>Online Shopping:</strong> Your order is processed across multiple servers\u200a\u2014\u200achecking inventory, handling payments, and coordinating delivery.</li>\n<li>\n<strong>Email:</strong> When you send an email, it\u2019s copied and stored on multiple servers for reliability.</li>\n<li>\n<strong>Social Media:</strong> Your updates are replicated across servers, ensuring everyone sees them even if one server gets overloaded.</li>\n</ul>\n<p><strong>Distributed systems are the invisible heroes powering the digital world. They work behind the scenes, keeping things fast, reliable, and ever-growing. So next time you stream a movie or check your email, remember the power of many computers working together as\u00a0one!</strong></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=89dfaff8a08f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["distributed-systems","cloud","system-design-concepts","system-design-interview","data"]},{"title":"The Magic of Joins: Bringing Your Data Together","pubDate":"2024-03-22 06:31:30","link":"https://medium.com/@sourabhkr/the-magic-of-joins-bringing-your-data-together-bdd394d2e6f8?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/bdd394d2e6f8","author":"Sourabh Kumar","thumbnail":"","description":"\n<p>Imagine you\u2019re organizing a giant reunion for your old college friends. You have a list of everyone\u2019s email addresses (Emails table) and another list with their phone numbers (Phones table). But wait! How do you match the email addresses with the corresponding phone numbers? This is where joins come\u00a0in!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jThOoRiBVTaQyPxxzhDmSA.png\"><figcaption>Joins</figcaption></figure><p>In the world of databases, joins are like matchmakers for your data. They allow you to combine information from separate tables based on a common field, creating a more complete picture. Let\u2019s explore different types of joins using relatable examples:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2vNkCeMnDYZLcAYjTyGz2g.png\"><figcaption>Types of\u00a0joins</figcaption></figure><p><strong>The Inner Join: The Perfect\u00a0Match</strong></p>\n<p>Let\u2019s go back to our reunion. An inner join would only return results where there\u2019s a match in both tables. So, you\u2019d get a list with email addresses alongside only those phone numbers that have a corresponding email address. This is perfect when you only need data points that exist in both\u00a0tables.</p>\n<p><strong>Real-life example:</strong> An online store might have a \u201cCustomers\u201d table and an \u201cOrders\u201d table. An inner join would show customer details only for those with confirmed orders.</p>\n<p><strong>The Left Join: Including Everyone, Even the\u00a0Singles</strong></p>\n<p>Think of your reunion guest list again. Maybe some friends haven\u2019t shared their phone numbers yet. A left join would include all email addresses from the Emails table, even if there\u2019s no matching phone number in the Phones table. In those cases, the phone number field would show as\u00a0blank.</p>\n<p><strong>Real-life example:</strong> A library might have a \u201cBooks\u201d table and a \u201cBorrowers\u201d table. A left join would show all books, including those that haven\u2019t been borrowed yet (with a borrower field showing as\u00a0blank).</p>\n<p><strong>The Right Join: Don\u2019t Forget the Other\u00a0Side</strong></p>\n<p>Perhaps you also have a separate list of phone numbers for some old classmates you haven\u2019t emailed in a while. A right join would prioritize the Phones table, showing all phone numbers, even if there\u2019s no corresponding email address. Emails for those contacts would be\u00a0blank.</p>\n<p><strong>Real-life example:</strong> A music streaming service might have a \u201cUsers\u201d table and a \u201cPlaylists\u201d table. A right join would show all playlists, including those created by users who haven\u2019t signed up yet (with a username field showing as\u00a0blank).</p>\n<p><strong>The Full Outer Join: The Whole\u00a0Picture</strong></p>\n<p>Going back to the reunion, maybe you want a complete list that includes everyone, regardless of whether they provided both email and phone number. A full outer join would show all email addresses and all phone numbers, even if there\u2019s no\u00a0match.</p>\n<p><strong>Real-life example:</strong> A travel company might have a \u201cFlights\u201d table and a \u201cHotels\u201d table. A full outer join would show all flights and all hotels, even if there aren\u2019t hotels available in all flight destinations (or vice\u00a0versa).</p>\n<p>By understanding joins, you can unlock the true power of your data. They help you see connections, analyze trends, and gain a more comprehensive understanding of the information you have. So next time you\u2019re working with data, remember the magic of joins\u200a\u2014\u200athey\u2019ll help you bring your information together and create a more meaningful story.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bdd394d2e6f8\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Imagine you\u2019re organizing a giant reunion for your old college friends. You have a list of everyone\u2019s email addresses (Emails table) and another list with their phone numbers (Phones table). But wait! How do you match the email addresses with the corresponding phone numbers? This is where joins come\u00a0in!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jThOoRiBVTaQyPxxzhDmSA.png\"><figcaption>Joins</figcaption></figure><p>In the world of databases, joins are like matchmakers for your data. They allow you to combine information from separate tables based on a common field, creating a more complete picture. Let\u2019s explore different types of joins using relatable examples:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2vNkCeMnDYZLcAYjTyGz2g.png\"><figcaption>Types of\u00a0joins</figcaption></figure><p><strong>The Inner Join: The Perfect\u00a0Match</strong></p>\n<p>Let\u2019s go back to our reunion. An inner join would only return results where there\u2019s a match in both tables. So, you\u2019d get a list with email addresses alongside only those phone numbers that have a corresponding email address. This is perfect when you only need data points that exist in both\u00a0tables.</p>\n<p><strong>Real-life example:</strong> An online store might have a \u201cCustomers\u201d table and an \u201cOrders\u201d table. An inner join would show customer details only for those with confirmed orders.</p>\n<p><strong>The Left Join: Including Everyone, Even the\u00a0Singles</strong></p>\n<p>Think of your reunion guest list again. Maybe some friends haven\u2019t shared their phone numbers yet. A left join would include all email addresses from the Emails table, even if there\u2019s no matching phone number in the Phones table. In those cases, the phone number field would show as\u00a0blank.</p>\n<p><strong>Real-life example:</strong> A library might have a \u201cBooks\u201d table and a \u201cBorrowers\u201d table. A left join would show all books, including those that haven\u2019t been borrowed yet (with a borrower field showing as\u00a0blank).</p>\n<p><strong>The Right Join: Don\u2019t Forget the Other\u00a0Side</strong></p>\n<p>Perhaps you also have a separate list of phone numbers for some old classmates you haven\u2019t emailed in a while. A right join would prioritize the Phones table, showing all phone numbers, even if there\u2019s no corresponding email address. Emails for those contacts would be\u00a0blank.</p>\n<p><strong>Real-life example:</strong> A music streaming service might have a \u201cUsers\u201d table and a \u201cPlaylists\u201d table. A right join would show all playlists, including those created by users who haven\u2019t signed up yet (with a username field showing as\u00a0blank).</p>\n<p><strong>The Full Outer Join: The Whole\u00a0Picture</strong></p>\n<p>Going back to the reunion, maybe you want a complete list that includes everyone, regardless of whether they provided both email and phone number. A full outer join would show all email addresses and all phone numbers, even if there\u2019s no\u00a0match.</p>\n<p><strong>Real-life example:</strong> A travel company might have a \u201cFlights\u201d table and a \u201cHotels\u201d table. A full outer join would show all flights and all hotels, even if there aren\u2019t hotels available in all flight destinations (or vice\u00a0versa).</p>\n<p>By understanding joins, you can unlock the true power of your data. They help you see connections, analyze trends, and gain a more comprehensive understanding of the information you have. So next time you\u2019re working with data, remember the magic of joins\u200a\u2014\u200athey\u2019ll help you bring your information together and create a more meaningful story.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bdd394d2e6f8\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["joins-in-sql","database","leftjoin","sql-inner-join","d\u00e1ta"]},{"title":"The Blueprint: Why System Design is Crucial for Software Success","pubDate":"2024-03-18 19:52:35","link":"https://medium.com/@sourabhkr/the-blueprint-why-system-design-is-crucial-for-software-success-7a1b2ee3895a?source=rss-4cc8effadc6e------2","guid":"https://medium.com/p/7a1b2ee3895a","author":"Sourabh Kumar","thumbnail":"","description":"\n<p>In the ever-evolving world of software, building a product feels like constructing a skyscraper. You need a solid foundation, a well-defined blueprint, and a clear understanding of how all the pieces will fit together. This blueprint, in software development, is what we call <strong>system\u00a0design</strong>.</p>\n<p><strong>What is System\u00a0Design?</strong></p>\n<p>System design is the art and science of defining the architecture, components, and interfaces of a software system. It\u2019s the roadmap that guides developers from the initial concept to a scalable, robust, and maintainable product.</p>\n<p>Think of it this way: you wouldn\u2019t start building a skyscraper without an architect\u2019s plan, right? System design plays a similar role for software. It takes the high-level requirements and translates them into a concrete technical vision.</p>\n<p><strong>Why is System Design Important?</strong></p>\n<p>Here\u2019s why system design is a fundamental skill for anyone building software:</p>\n<ul>\n<li>\n<strong>Meeting Requirements:</strong> A well-designed system effectively addresses the needs of the users and the business. It ensures the software is performant, secure, and can handle the expected\u00a0load.</li>\n<li>\n<strong>Efficiency and Cost Savings:</strong> A thoughtful system design helps avoid costly rework and delays down the road. By planning for scalability and maintainability from the outset, you save time and resources in the long\u00a0run.</li>\n<li>\n<strong>Scalability and Growth:</strong> Imagine building a charming two-story house on a foundation that can\u2019t support a ten-story skyscraper. A good system design anticipates future growth and allows the software to adapt to increasing demands.</li>\n<li>\n<strong>Maintainability and Collaboration:</strong> A well-designed system is easier to understand, modify, and debug. Clear documentation and modular components facilitate collaboration among developers and reduce maintenance headaches.</li>\n<li>\n<strong>Communication and Problem-Solving:</strong> System design fosters a holistic view of the software. It encourages developers to think about trade-offs, identify potential bottlenecks, and come up with creative solutions.</li>\n</ul>\n<p>By mastering system design, software engineers become architects, not just coders. They gain the ability to translate complex problems into elegant technical solutions, ultimately leading to the creation of successful software products.</p>\n<p><strong>Next Steps</strong></p>\n<p>This blog post is just a glimpse into the vast world of system design. There are many resources available online and in libraries to delve deeper. If you\u2019re interested in learning more, here are some suggestions:</p>\n<ul>\n<li>\n<strong>Online Courses:</strong> Platforms like Coursera and edX offer courses on system design principles and best practices.</li>\n<li>\n<strong>Books:</strong> Explore classic texts like \u201cDesigning Data-Intensive Applications\u201d by Martin Kleppmann or \u201cBuilding Microservices\u201d by Sam\u00a0Newman.</li>\n<li>\n<strong>Practice:</strong> Look for online communities or challenges that provide opportunities to test your system design\u00a0skills.</li>\n</ul>\n<p>By investing in system design knowledge, you\u2019ll be well on your way to becoming a more valuable and well-rounded software professional.</p>\n<p>Happy designing!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7a1b2ee3895a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In the ever-evolving world of software, building a product feels like constructing a skyscraper. You need a solid foundation, a well-defined blueprint, and a clear understanding of how all the pieces will fit together. This blueprint, in software development, is what we call <strong>system\u00a0design</strong>.</p>\n<p><strong>What is System\u00a0Design?</strong></p>\n<p>System design is the art and science of defining the architecture, components, and interfaces of a software system. It\u2019s the roadmap that guides developers from the initial concept to a scalable, robust, and maintainable product.</p>\n<p>Think of it this way: you wouldn\u2019t start building a skyscraper without an architect\u2019s plan, right? System design plays a similar role for software. It takes the high-level requirements and translates them into a concrete technical vision.</p>\n<p><strong>Why is System Design Important?</strong></p>\n<p>Here\u2019s why system design is a fundamental skill for anyone building software:</p>\n<ul>\n<li>\n<strong>Meeting Requirements:</strong> A well-designed system effectively addresses the needs of the users and the business. It ensures the software is performant, secure, and can handle the expected\u00a0load.</li>\n<li>\n<strong>Efficiency and Cost Savings:</strong> A thoughtful system design helps avoid costly rework and delays down the road. By planning for scalability and maintainability from the outset, you save time and resources in the long\u00a0run.</li>\n<li>\n<strong>Scalability and Growth:</strong> Imagine building a charming two-story house on a foundation that can\u2019t support a ten-story skyscraper. A good system design anticipates future growth and allows the software to adapt to increasing demands.</li>\n<li>\n<strong>Maintainability and Collaboration:</strong> A well-designed system is easier to understand, modify, and debug. Clear documentation and modular components facilitate collaboration among developers and reduce maintenance headaches.</li>\n<li>\n<strong>Communication and Problem-Solving:</strong> System design fosters a holistic view of the software. It encourages developers to think about trade-offs, identify potential bottlenecks, and come up with creative solutions.</li>\n</ul>\n<p>By mastering system design, software engineers become architects, not just coders. They gain the ability to translate complex problems into elegant technical solutions, ultimately leading to the creation of successful software products.</p>\n<p><strong>Next Steps</strong></p>\n<p>This blog post is just a glimpse into the vast world of system design. There are many resources available online and in libraries to delve deeper. If you\u2019re interested in learning more, here are some suggestions:</p>\n<ul>\n<li>\n<strong>Online Courses:</strong> Platforms like Coursera and edX offer courses on system design principles and best practices.</li>\n<li>\n<strong>Books:</strong> Explore classic texts like \u201cDesigning Data-Intensive Applications\u201d by Martin Kleppmann or \u201cBuilding Microservices\u201d by Sam\u00a0Newman.</li>\n<li>\n<strong>Practice:</strong> Look for online communities or challenges that provide opportunities to test your system design\u00a0skills.</li>\n</ul>\n<p>By investing in system design knowledge, you\u2019ll be well on your way to becoming a more valuable and well-rounded software professional.</p>\n<p>Happy designing!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7a1b2ee3895a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["codewithsourabh","software-development","system-design-interview","code","system-design-concepts"]}]}